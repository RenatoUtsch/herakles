/*
 * Copyright 2017 Renato Utsch
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Entry point to the Herakles renderer.
 */

#include "herakles/shaders/path_tracer.glsl"
#include "herakles/shaders/random.glsl"
#include "herakles/shaders/scene.glsl"

layout(local_size_x = 32, local_size_y = 32) in;

void main() {
  const ivec2 pixelPos = ivec2(gl_GlobalInvocationID.xy);
  randInit(imageLoad(Seeds, pixelPos).x);

  const vec2 resolution = imageSize(Image);
  const vec2 pixelIndex = vec2(gl_GlobalInvocationID.xy);
  const vec3 cx = Camera.right * Camera.fov *
                  (resolution.x / resolution.y);
  const vec3 cy = Camera.up * Camera.fov;

  vec3 color = vec3(0.);
  for (int i = 0; i < NUM_SAMPLES; ++i) {
    vec3 direction = cx * (pixelIndex.x / resolution.x - 0.5)
                   - cy * (pixelIndex.y / resolution.y - 0.5)
                   + Camera.direction;
    color += radiance(Ray(Camera.position,
                          normalize(direction)));
  }

  // gamma correction.
  color = pow(color / NUM_SAMPLES, vec3(1.0f / 2.2f));

  // Adding old color.
  vec3 oldColor = imageLoad(Image, pixelPos).xyz;
  color = (oldColor * FrameCount * NUM_SAMPLES + color * NUM_SAMPLES) /
          (FrameCount * NUM_SAMPLES + NUM_SAMPLES);

  color = clamp(color, 0.0f, 1.0f);
  imageStore(Image, pixelPos, vec4(color, 1.0f));
  imageStore(Seeds, pixelPos, uvec4(randSeed()));
}
