// Herakles renderer binary scene format.
//
// This format is described in such a way that a scene file can be memory mapped
// and easily transferred to the GPU memory and used as GLSL structures.
//
// A file in this format *can* be written by hand using the FlatBuffer JSON
// representation, but as it was designed with performance in mind, it will
// likely not be easy to do. Instead, a better idea is to write a scene in
// another format (like the PBRT format subset) and use a converter.

namespace hk.scene;
file_identifier "HKS1";
file_extension "hks";

/// Represents a vec2 in GLSL.
struct vec2 {
  x: float;
  y: float;
}

/// Represents a vec3 in GLSL.
struct vec3 {
  x: float;
  y: float;
  z: float;
}

/// Represents a vec4 in GLSL.
struct vec4 {
  x: float;
  y: float;
  z: float;
  w: float;
}

/// Represents a mat4x4 in GLSL.
struct mat4 {
  a: vec4;
  b: vec4;
  c: vec4;
  d: vec4;
}

/// Represents a pinhole camera.
struct PinholeCamera {
  /// Initial position of the camera.
  position: vec3;

  /// Field of view of the camera.
  fov: float;

  /// Unit direction vector of the camera.
  direction: vec3;

  /// Unit up vector of the camera.
  up: vec3;
}

/// Represents an area light.
/// It's important to notice that area lights have a reference to their meshes
/// and meshes have a reference to their area lights. This is an important
/// optimization, and care should be taken to keep these indexes correct.
struct AreaLight {
  /// Light emission.
  emission: vec3;

  /// ID of the mesh that represents this light. The areaLightID in the mesh
  /// must represent this light.
  meshID: uint;
}

struct Mesh {
  /// First triangle vertex index from the Scene indices array.
  begin: uint;

  /// One-past-last triangle vertex index from the Scene indices array.
  end: uint;

  /// ID of the material used in the mesh, from the Scene materials array.
  materialID: uint;

  /// Index of the area light of this mesh. If < 0, the mesh doesn't emit light.
  areaLightID: int;
}

struct Material {
  /// Reflectivity of the diffuse surface.
  kd: vec4;
}

table Scene {
  camera: PinholeCamera;

  /// Ambient light.
  ambientLight: vec3;

  /// Area lights.
  areaLights: [AreaLight];

  /// Triangle meshes, each mesh combines triangles and other information from
  /// this Scene table.
  meshes: [Mesh];

  /// Different materials present in the scene.
  materials: [Material];

  /// Indices of the triangle vertices. Every three indices represents a
  /// triangle. Meshes reference these triangles through their begin and end
  /// indices.
  indices: [uint];

  /// Triangle vertices.
  vertices: [vec4];

  /// Per-vertex triangle normals. Shading normals will be computed by
  /// interpolating these normals.
  normals: [vec4];

  /// Per-vertex texture coordinates. If the mesh is textured, this array must
  /// be present.
  uvs: [vec2];

  /// Different textures present in the scene.
  // textures: [Texture];

  /// Transformations applied to the meshes before they're used.
  // transforms: [mat4];
}

root_type Scene;
